{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1S-5wDBVR_mAu0EDs3yIg13frg76XgI6z",
      "authorship_tag": "ABX9TyPqrEUNQkKJyWfz2LH5OJzA",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/irawan555/MachineLearningTasks/blob/main/1stWeekTasks/1_Decision_Tree_Irawan.ows\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Nama : Irawan Mardiansyah\n",
        "\n",
        "Nim : 1103210174\n",
        "\n",
        "Data set : melb_house.csv\n",
        "\n",
        "Overview :"
      ],
      "metadata": {
        "id": "oOCZxb4MdjoD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Baca data dari file CSV\n",
        "url = \"/content/drive/MyDrive/Dataset/melb_data.csv\"\n",
        "data = pd.read_csv(url)\n",
        "\n",
        "# Tampilkan lima baris pertama dari data\n",
        "print(data.head())\n",
        "\n",
        "\n",
        "# Pisahkan fitur dan target\n",
        "X = data.select_dtypes(include=['float64','int64'])  # Memilih kolom dengan tipe data float dan integer\n",
        "X = X.dropna(axis=1)  # Menghapus kolom yang berisi NaN\n",
        "Y = data['Price']  # Membuat target\n",
        "\n",
        "# Bagi data menjadi data latih dan data uji\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Buat model Decision Tree\n",
        "model = DecisionTreeRegressor(random_state=42)\n",
        "\n",
        "# Latih model pada data latih\n",
        "model.fit(X_train, Y_train)\n",
        "\n",
        "# Lakukan prediksi pada data uji\n",
        "Y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluasi model\n",
        "mse = mean_squared_error(Y_test, Y_pred)\n",
        "print(\"Mean Squared Error:\", mse)"
      ],
      "metadata": {
        "id": "Cfai3pIWgD90"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}